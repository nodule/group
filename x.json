{
  "name": "group",
  "description": "Group nodes for ChiÏ‡",
  "version": "0.0.2",
  "repository": {
    "type": "git",
    "url": "https://github.com/nodule/group.git"
  },
  "dependencies": {
    "chix-group": "psichi/chix-group"
  },
  "nodes": [
    {
      "name": "by",
      "ns": "group",
      "async": true,
      "description": "Groups an object by it's differentiator",
      "phrases": {
        "active": "Grouping object"
      },
      "ports": {
        "input": {
          "in": {
            "title": "Object",
            "type": "any"
          },
          "xin": {
            "title": "In Group",
            "type": "any"
          },
          "by": {
            "title": "Group By",
            "type": "any"
          }
        },
        "output": {
          "out": {
            "title": "out",
            "group": "result",
            "type": "boolean"
          },
          "by": {
            "title": "Group By",
            "group": "result",
            "type": "any"
          },
          "xout": {
            "title": "Xout",
            "type": "array"
          }
        }
      },
      "dependencies": {
        "npm": {
          "chix-group": "psichi/chix-group"
        }
      },
      "fn": "on.start = function () {\n  state.groupBy = chix_group.groupBy.create()\n  state.groupBy.on('group', function (group, by) {\n    var $ = state.$\n    var g = chix_group.send.create()\n    output({xout: g.open()})\n    output({out: g.write($.create(group)), by: $.create(by)})\n    output({xout: g.close()})\n  })\n}\n\n\non.input.in = function () {\n  state.groupBy.add($.get('in'))\n}\n\non.input.by = function () {\n  state.groupBy.setBy($.get('by'))\n}\n\non.input.xin = function () {\n  state.$ = $\n  state.groupBy.receive($.get('xin'))\n}\n"
    },
    {
      "name": "group",
      "ns": "group",
      "async": true,
      "description": "Groups input into an array",
      "phrases": {
        "active": "Grouping object"
      },
      "ports": {
        "input": {
          "xin": {
            "title": "In Group",
            "type": "any"
          },
          "in": {
            "title": "Object",
            "type": "any"
          }
        },
        "output": {
          "xout": {
            "title": "Xout",
            "type": "array"
          },
          "out": {
            "title": "out",
            "group": "result",
            "type": "any"
          }
        }
      },
      "dependencies": {
        "npm": {
          "chix-group": "psichi/chix-group"
        }
      },
      "fn": "on.start = function start() {\n  state.group = chix_group.recv.create()\n  state.$ = null\n  state.group.on('group', function groupHandler(group) {\n    var p = state.$.create(group.map((p) => p.read(p.owner)))\n    p.removeMeta('chix-group')\n    output({out: p})\n  })\n}\n\non.input.in = function () {\n  state.group.add($.get('in'))\n  state.$ = $\n};\n\non.input.xin = function () {\n  state.group.receive($.get('xin'))\n  state.$ = $\n};\n"
    },
    {
      "name": "sync",
      "ns": "group",
      "async": true,
      "description": "Synchronizes group items on 2 different ports",
      "phrases": {
        "active": "Synchronizing items"
      },
      "ports": {
        "input": {
          "in1": {
            "title": "In 1",
            "type": "any"
          },
          "in2": {
            "title": "In 2",
            "type": "any"
          },
          "xin": {
            "title": "In Group",
            "type": "object"
          }
        },
        "output": {
          "out1": {
            "title": "Out 1",
            "type": "any"
          },
          "out2": {
            "title": "Out 2",
            "type": "any"
          }
        }
      },
      "dependencies": {
        "npm": {
          "chix-group": "psichi/chix-group"
        }
      },
      "fn": "on.start = function () {\n  state.sync = chix_group.sync.create(['out1', 'out2'])\n  state.sync.on('sync', function (itemId, set) {\n    var $ = state.$\n    var out = {}\n    Object.keys(set).forEach(function (port) {\n      out[port] = set[port]\n    })\n    output(out)\n  })\n}\n\non.input.in1 = function () {\n  state.sync.add('out1', $.get('in1'))\n}\n\non.input.in2 = function () {\n  state.sync.add('out2', $.get('in2'))\n}\n\non.input.xin = function () {\n  state.$ = $\n  state.sync.receive($.get('xin'))\n}\n"
    },
    {
      "name": "sync3",
      "ns": "group",
      "async": true,
      "description": "Synchronizes group items on 3 different ports",
      "phrases": {
        "active": "Synchronizing items"
      },
      "ports": {
        "input": {
          "in1": {
            "title": "In 1",
            "type": "any"
          },
          "in2": {
            "title": "In 2",
            "type": "any"
          },
          "in3": {
            "title": "In 3",
            "type": "any"
          },
          "xin": {
            "title": "In Group",
            "type": "object"
          }
        },
        "output": {
          "out1": {
            "title": "Out 1",
            "type": "any"
          },
          "out2": {
            "title": "Out 2",
            "type": "any"
          },
          "out3": {
            "title": "Out 3",
            "type": "any"
          }
        }
      },
      "dependencies": {
        "npm": {
          "chix-group": "psichi/chix-group"
        }
      },
      "fn": "on.start = function () {\n  state.sync = chix_group.sync.create(['out1', 'out2', 'out3'])\n  state.sync.on('sync', function (itemId, set) {\n    var $ = state.$\n    var out = {}\n    Object.keys(set).forEach(function (port) {\n      out[port] = $.create(set[port])\n    })\n    output(out)\n  })\n}\n\non.input.in1 = function () {\n  state.sync.add('out1', $.get('in1'))\n}\n\non.input.in2 = function () {\n  state.sync.add('out2', $.get('in2'))\n}\n\non.input.in3 = function () {\n  state.sync.add('out3', $.get('in3'))\n}\n\non.input.xin = function () {\n  state.$ = $\n  state.sync.receive($.get('xin'))\n}\n"
    },
    {
      "name": "sync4",
      "ns": "group",
      "async": true,
      "description": "Synchronizes group items on 4 different ports",
      "phrases": {
        "active": "Synchronizing items"
      },
      "ports": {
        "input": {
          "in1": {
            "title": "In 1",
            "type": "any"
          },
          "in2": {
            "title": "In 2",
            "type": "any"
          },
          "in3": {
            "title": "In 3",
            "type": "any"
          },
          "in4": {
            "title": "In 4",
            "type": "any"
          },
          "xin": {
            "title": "In Group",
            "type": "object"
          }
        },
        "output": {
          "out1": {
            "title": "Out 1",
            "type": "any"
          },
          "out2": {
            "title": "Out 2",
            "type": "any"
          },
          "out3": {
            "title": "Out 3",
            "type": "any"
          },
          "out4": {
            "title": "Out 4",
            "type": "any"
          }
        }
      },
      "dependencies": {
        "npm": {
          "chix-group": "psichi/chix-group"
        }
      },
      "fn": "on.start = function () {\n  state.sync = chix_group.sync.create(['out1', 'out2', 'out3', 'out4'])\n  state.sync.on('sync', function (itemId, set) {\n    var $ = state.$\n    var out = {}\n    Object.keys(set).forEach(function (port) {\n      out[port] = $.create(set[port])\n    })\n    output(out)\n  })\n}\n\non.input.in1 = function () {\n  state.sync.add('out1', $.get('in1'))\n}\n\non.input.in2 = function () {\n  state.sync.add('out2', $.get('in2'))\n}\n\non.input.in3 = function () {\n  state.sync.add('out3', $.get('in3'))\n}\n\non.input.in4 = function () {\n  state.sync.add('out4', $.get('in4'))\n}\n\non.input.xin = function () {\n  state.$ = $\n  state.sync.receive($.get('xin'))\n}\n"
    }
  ]
}